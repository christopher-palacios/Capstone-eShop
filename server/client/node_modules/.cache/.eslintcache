[{"/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/index.js":"1","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/reportWebVitals.js":"2","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/App.js":"3","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/components/Header/Header.jsx":"4","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/components/Carousel/Carousel.jsx":"5","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/components/LoginModal/LogInModal.jsx":"6","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/components/ProtectedRoute.js":"7","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/components/SignUpModal/SignUpModal.jsx":"8","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/pages/Home/Home.jsx":"9","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/pages/Categories/Catgegories.jsx":"10","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/pages/itemList/itemList.jsx":"11","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/pages/ProductDetail/ProductDetail.jsx":"12","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/pages/ShoppingCart/ShoppingCart.jsx":"13","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/AppContext/AppContext.jsx":"14","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/components/CheckoutModal/CheckoutModal.jsx":"15","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/components/Field/Field.jsx":"16","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/components/Stripe/Stripe.jsx":"17"},{"size":503,"mtime":1618449602850,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1618380389318,"results":"20","hashOfConfig":"19"},{"size":1247,"mtime":1623441105591,"results":"21","hashOfConfig":"19"},{"size":4617,"mtime":1623442098370,"results":"22","hashOfConfig":"19"},{"size":1950,"mtime":1623663600437,"results":"23","hashOfConfig":"19"},{"size":2800,"mtime":1623441209365,"results":"24","hashOfConfig":"19"},{"size":561,"mtime":1623431314234,"results":"25","hashOfConfig":"26"},{"size":2612,"mtime":1623441233183,"results":"27","hashOfConfig":"19"},{"size":1595,"mtime":1623666181918,"results":"28","hashOfConfig":"19"},{"size":2442,"mtime":1623662457074,"results":"29","hashOfConfig":"19"},{"size":3621,"mtime":1623665420182,"results":"30","hashOfConfig":"19"},{"size":5214,"mtime":1623445432893,"results":"31","hashOfConfig":"19"},{"size":4980,"mtime":1623446897516,"results":"32","hashOfConfig":"19"},{"size":8076,"mtime":1623610526960,"results":"33","hashOfConfig":"19"},{"size":5509,"mtime":1623448289464,"results":"34","hashOfConfig":"19"},{"size":553,"mtime":1619923120620,"results":"35","hashOfConfig":"19"},{"size":680,"mtime":1623356477592,"results":"36","hashOfConfig":"19"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1l7ujtn",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lm9j52",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/index.js",[],"/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/reportWebVitals.js",[],"/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/App.js",[],"/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/components/Header/Header.jsx",["76","77"],"import React, { useContext, useEffect, useState } from \"react\";\nimport ShoppingCartRoundedIcon from \"@material-ui/icons/ShoppingCartRounded\";\nimport LoginModal from \"../LoginModal/LogInModal\";\nimport SignUpModal from \"../SignUpModal/SignUpModal\";\nimport \"./Header.scss\";\nimport { Navbar, Nav, NavDropdown, Badge } from \"react-bootstrap\";\nimport { AppContext } from \"../../AppContext/AppContext\";\n\nfunction Header() {\n  const {\n    currentUser,\n    setCurrentUser,\n    cart,\n    setCart,\n    categoryList,\n    setIsSignedIn,\n  } = useContext(AppContext);\n  const [logInModalShow, setLogInModalShow] = useState(false);\n  const [signUpModalShow, setSignUpModalShow] = useState(false);\n  const user = localStorage.getItem(\"user\");\n\n  useEffect(() => {\n    // setCart(cart);\n    setCurrentUser(user);\n  }, []);\n\n  //LogIn Modal Switches\n  const handleLoginModalOpen = () => {\n    setLogInModalShow(true);\n  };\n  const handleLoginModalClose = () => {\n    setLogInModalShow(false);\n  };\n  const handleLoginModalSwitch = () => {\n    setLogInModalShow(false);\n    setSignUpModalShow(true);\n  };\n\n  //SignUp Modal Show\n  const handleSignupModalOpen = () => {\n    setSignUpModalShow(true);\n  };\n  const handleSignupModalClose = () => {\n    setSignUpModalShow(false);\n  };\n  const handleSignupModalSwitch = () => {\n    setSignUpModalShow(false);\n    setLogInModalShow(true);\n  };\n\n  //Sign user out by removing token and user from session storage\n  const handleSignOut = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"userId\");\n    setCurrentUser(null);\n    setIsSignedIn(false);\n  };\n  return (\n    <nav className=\"nav\">\n      <Navbar className=\"nav__color\" variant=\"dark\" expand=\"sm\">\n        <Nav.Link className=\"nav__brand\" href=\"/\">\n          eShop\n        </Nav.Link>\n\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <NavDropdown\n              className=\"dropp\"\n              title={\n                !cart.cartQuantity ? (\n                  <>\n                    <ShoppingCartRoundedIcon />\n                  </>\n                ) : (\n                  <>\n                    <ShoppingCartRoundedIcon />\n                    <Badge pill variant=\"light\">\n                      {cart.cartQuantity}\n                    </Badge>\n                  </>\n                )\n              }\n            >\n              {categoryList.map((cat) => {\n                return (\n                  <NavDropdown.Item\n                    className=\"nav__link\"\n                    key={cat._id}\n                    href={`/categories/${cat._id}`}\n                  >\n                    Shop {cat.name}\n                  </NavDropdown.Item>\n                );\n              })}{\" \"}\n              <NavDropdown.Divider />\n              <NavDropdown.Item className=\"nav__link\" href=\"/cart\">\n                Your Cart\n              </NavDropdown.Item>\n            </NavDropdown>\n            <NavDropdown\n              title={currentUser || \"Guest\"}\n              id=\"dropdown-menu-align-right\"\n            >\n              {currentUser ? (\n                <NavDropdown.Item className=\"nav__link\" onClick={handleSignOut}>\n                  Sign Out\n                </NavDropdown.Item>\n              ) : (\n                <>\n                  <NavDropdown.Item onClick={handleLoginModalOpen}>\n                    Log In\n                  </NavDropdown.Item>\n                  <NavDropdown.Item\n                    className=\"nav__link\"\n                    onClick={handleSignupModalOpen}\n                  >\n                    Create Account\n                  </NavDropdown.Item>\n                </>\n              )}\n            </NavDropdown>\n            {/* <Nav.Link href=\"/cart\">\n             <ShoppingCartRoundedIcon className=\"nav__cart\" />\n            {!cart.cartQuantity ? null : (\n               <Badge pill variant=\"light\">\n                 {cart.cartQuantity}\n               </Badge>\n             )}\n           </Nav.Link> */}\n          </Nav>\n        </Navbar.Collapse>\n        <LoginModal\n          onHide={handleLoginModalClose}\n          show={logInModalShow}\n          loginClose={handleLoginModalClose}\n          loginSwitch={handleLoginModalSwitch}\n        />\n        <SignUpModal\n          onHide={handleSignupModalClose}\n          show={signUpModalShow}\n          showLogin={logInModalShow}\n          signupClose={handleSignupModalClose}\n          signupSwitch={handleSignupModalSwitch}\n        />\n      </Navbar>\n    </nav>\n  );\n}\n\nexport default Header;\n","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/components/Carousel/Carousel.jsx",[],"/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/components/LoginModal/LogInModal.jsx",[],"/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/components/ProtectedRoute.js",[],"/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/components/SignUpModal/SignUpModal.jsx",[],"/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/pages/Home/Home.jsx",[],"/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/pages/Categories/Catgegories.jsx",[],"/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/pages/itemList/itemList.jsx",["78"],"import axios from \"axios\";\nimport React, {\n  useState,\n  useEffect,\n  useContext,\n  //  useContext\n} from \"react\";\n// import { AppContext } from \"../../AppContext/AppContext\";\nimport \"./itemList.scss\";\nimport {\n  Nav,\n  Card,\n  CardDeck,\n  Form,\n  FormControl,\n  Button,\n  Dropdown,\n  DropdownButton,\n} from \"react-bootstrap\";\nimport { AppContext } from \"../../AppContext/AppContext\";\n\nconst baseUrl = \"http://localhost:8080/api\";\n\nfunction ItemList(props) {\n  // const guestCart = JSON.parse(localStorage.getItem(\"guestCart\"));\n  // const { productList } = useContext(AppContext);\n  const { categoryList } = useContext(AppContext);\n  const [selectedCategory, setSelectedCategory] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [drop, setDrop] = useState(\"\");\n\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n  const { id } = props.match.params;\n\n  const getSelected = () => {\n    axios.get(`${baseUrl}/categories/${id}`).then((res) => {\n      setSelectedCategory(res.data);\n    });\n  };\n\n  useEffect(() => {\n    getSelected();\n    let current = categoryList.filter((cat) => {\n      return cat._id === id;\n    });\n    setDrop(current[0]?.name);\n  }, [categoryList, id]);\n  return (\n    <section className=\"itemList\">\n      <div className=\"sub-nav\">\n        <Nav className=\"sub-nav__links\" activeKey=\"/home\">\n          <DropdownButton\n            id=\"dropdown-basic-button\"\n            variant=\"Secondary\"\n            title={drop}\n          >\n            {categoryList.map((cat) => {\n              return (\n                <Dropdown.Item key={cat._id} href={`/categories/${cat._id}`}>\n                  {cat.name}\n                </Dropdown.Item>\n              );\n            })}\n            <Dropdown.Item href={`/categories`}>Categories</Dropdown.Item>\n          </DropdownButton>\n          <div className=\"sub-nav__form\">\n            <Form inline>\n              <FormControl\n                type=\"text\"\n                onChange={handleChange}\n                placeholder=\"Search\"\n                className=\"sub-nav__form--input\"\n              />\n              <Button className=\"sub-nav__form--button\" variant=\"outline\">\n                Search\n              </Button>\n            </Form>\n          </div>\n        </Nav>\n      </div>\n      <div className=\"shop\">\n        <div className=\"shop__container\">\n          <CardDeck className=\"shop__card\">\n            {selectedCategory\n              ?.filter((item) => {\n                return item.name.toLowerCase().includes(search.toLowerCase());\n              })\n              .map((product) => {\n                return (\n                  <Card className=\"shop__card--indv\" key={product._id}>\n                    <Card.Body>\n                      <Card.Link\n                        className=\"shop__card--top\"\n                        href={`/product/${product._id}`}\n                      >\n                        <Card.Img\n                          className=\"shop__card--img\"\n                          variant=\"top\"\n                          src={product.image}\n                        />\n                      </Card.Link>\n                    </Card.Body>\n                    <Card.Footer className=\"shop__card--footer\">\n                      <Card.Title>{product.name}</Card.Title>\n\n                      <small className=\"text-muted\">\n                        <Card.Text>{product.price}</Card.Text>\n                      </small>\n                    </Card.Footer>\n                  </Card>\n                );\n              })}\n          </CardDeck>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default ItemList;\n","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/pages/ProductDetail/ProductDetail.jsx",["79"],"import axios from \"axios\";\nimport { Form, Button } from \"react-bootstrap\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { AppContext } from \"../../AppContext/AppContext\";\nimport swal from \"sweetalert\";\nimport \"./ProductDetail.scss\";\n\nconst baseUrl = \"http://localhost:8080/api\";\n\nfunction OnSale(props) {\n  const [selectedProduct, setSelectedProduct] = useState([]);\n  const [quantity] = useState(1);\n  const { setCart, token, currentUser } = useContext(AppContext);\n\n  const handleSubmit = (product) => {\n    const price = product.price.slice(0, 9).split(\",\").join(\"\");\n    //if not current user\n    if (!token) {\n      let storage = localStorage.getItem(\"guestCart\");\n      let guestCart = JSON.parse(storage);\n      const isExist = guestCart.products\n        .map((product) => product.name)\n        .includes(product.name);\n      if (!isExist) {\n        let newProduct = {\n          quantity: 1,\n          productTotal: Number(product.price),\n          productId: product._id,\n          name: product.name,\n          price: Number(product.price),\n          image: product.image,\n          category: product.category,\n        };\n        //add new product to guest cart\n        guestCart.products.push(newProduct);\n        //recalculate totals for cart\n        guestCart.cartTotal = guestCart.products\n          .map((product) => Number(product.productTotal))\n          .reduce((acc, curr) => acc + curr);\n        guestCart.cartQuantity = guestCart.products\n          .map((product) => Number(product.quantity))\n          .reduce((acc, curr) => acc + curr);\n        //save carts to state and local storage\n        localStorage.setItem(\"guestCart\", JSON.stringify(guestCart));\n        setCart(guestCart);\n        swal(\"Success!\", \"Item has beeen added to cart\");\n      } else if (isExist) {\n        //find index of existing product in guest cart\n        const existingIndex = guestCart.products\n          .map((product) => product.name)\n          .indexOf(product.name);\n        //update existing product totals\n        guestCart.products[existingIndex].productTotal =\n          Number(guestCart.products[existingIndex].productTotal) +\n          Number(product.price);\n        guestCart.products[existingIndex].quantity =\n          Number(guestCart.products[existingIndex].quantity) + 1;\n        //recalculate cart totals\n        guestCart.cartTotal = guestCart.products\n          .map((product) => product.productTotal)\n          .reduce((acc, curr) => acc + curr);\n        guestCart.cartQuantity = guestCart.products\n          .map((product) => product.quantity)\n          .reduce((acc, curr) => acc + curr);\n        //save guest cart to state and local storage\n        setCart(guestCart);\n        swal(\"Success!\", \"Item has beeen updated\");\n        localStorage.setItem(\"guestCart\", JSON.stringify(guestCart));\n      }\n    }\n    if (token) {\n      axios\n        .post(\n          `${baseUrl}/cart`,\n          {\n            quantity,\n            product,\n            price,\n          },\n          {\n            headers: {\n              authorization: `Bearer ${token}`,\n            },\n          }\n        )\n        .then((res) => {\n          setCart(res.data);\n          swal(\"Success!\", \"Item has beeen added to cart\");\n        })\n        .catch((err) => swal(\"Please sign in to continue shopping\"));\n    }\n  };\n\n  useEffect(() => {\n    const { id } = props.match.params;\n    axios.get(`${baseUrl}/product/${id}`).then((res) => {\n      const selectedProduct = res.data;\n      setSelectedProduct(selectedProduct);\n    });\n  }, [props.match.params]);\n  return (\n    <>\n      <div className=\"product\">\n        <img\n          className=\"product__img\"\n          alt=\"product img\"\n          src={selectedProduct.image}\n        ></img>\n        <div className=\"product__details\">\n          <div className=\"product__details--top\">\n            <div className=\"product__details--info\">\n              <h1 className=\"product__details--title\">\n                {selectedProduct.name}\n              </h1>\n              <h3 className=\"product__details--category\">\n                {selectedProduct.category}\n              </h3>\n              <h4>Price: {selectedProduct.price}</h4>\n            </div>\n            <div className=\"product__details--action\">\n              <div className=\"product__details--qty\">\n                <Form></Form>\n              </div>\n              <Button\n                onClick={() => {\n                  handleSubmit(selectedProduct);\n                }}\n                className=\"product__details--add\"\n                variant=\"outline-dark\"\n              >\n                ADD TO CART\n              </Button>\n            </div>\n          </div>\n          <div className=\"product__details--footer\">\n            <p>{selectedProduct.description}</p>\n          </div>\n          {/* <div className=\"product__review\">\n              <div className=\"product__review--card\">\n                <div className=\"product__review--head\">\n                  <h3>user</h3>\n                  <h3>timestamp</h3>\n                </div>\n                <h3>review text goes here</h3>\n              </div>\n            </div> */}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default OnSale;\n","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/pages/ShoppingCart/ShoppingCart.jsx",["80","81"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { Card, ListGroup, ListGroupItem, Button } from \"react-bootstrap\";\nimport CheckoutModal from \"../../components/CheckoutModal/CheckoutModal\";\nimport { AppContext } from \"../../AppContext/AppContext\";\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport swal from \"sweetalert\";\nimport \"./ShoppingCart.scss\";\nimport Stripe from \"../../components/Stripe/Stripe\";\n\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_KEY);\n\nexport function ShoppingCart() {\n  const {\n    cart,\n    decreaseQty,\n    increaseQty,\n    deleteProduct,\n    purchased,\n    currentUser,\n    setCart,\n    token,\n    // showCheckoutModal,\n    // setShowCheckoutModal,\n    // setPurchased,\n  } = useContext(AppContext);\n  const [showCheckoutModal, setShowCheckoutModal] = useState(false);\n  let guestCart = JSON.parse(localStorage.getItem(\"guestCart\"));\n  const checkAuth = () => {\n    if (!token) {\n      swal(\"Please sign in to checkout\");\n    } else {\n      setShowCheckoutModal(true);\n    }\n  };\n\n  const renderPurchaseMessage = () => {\n    return swal(\"Thank you for your purchase\")(<Redirect to=\"/\" />);\n  };\n\n  const renderEmptyCartMessage = () => {\n    return (\n      <div className=\"cart__alt\">\n        <h3 className=\"cart__alt--title\">Your cart</h3>\n        <p className=\"cart__alt--empty\">\n          No items in your cart, please continue shopping!\n        </p>\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    console.log(guestCart);\n\n    if (!token) {\n      setCart(guestCart);\n    }\n  }, []);\n\n  if (purchased) {\n    return renderPurchaseMessage();\n  }\n\n  if (!cart?.products || cart?.products?.length < 1) {\n    return renderEmptyCartMessage();\n  }\n  return (\n    <section className=\"cart\">\n      <div className=\"cart__list\">\n        <div className=\"cart__list--title\"></div>\n        {cart?.products?.map((product) => {\n          return (\n            //  ADJUST FONT SIZES FOR BREAKPOINTS\n            <Card key={product.productId} className=\"cart__card\">\n              <Card.Img\n                className=\"cart__card--image\"\n                variant=\"top\"\n                src={product.image}\n              />\n              <Card.Body className=\"cart__card--body\">\n                <Link to={`/product/${product.productId}`}>\n                  <Card.Title>{product.name}</Card.Title>\n                </Link>\n                <Link to={`/categories`}>\n                  <Card.Text>{`${product.category}`}</Card.Text>\n                </Link>\n              </Card.Body>\n              <ListGroup className=\"cart__info\">\n                <ListGroupItem className=\"cart__info--price\">{`Price: $${product.productTotal.toFixed(\n                  2\n                )}`}</ListGroupItem>\n                <ListGroupItem className=\"cart__info--qty\">\n                  <div\n                    className=\"cart__info--sub\"\n                    onClick={() => {\n                      decreaseQty({ ...product }, cart._id);\n                    }}\n                  >\n                    -\n                  </div>\n                  {`Qty: ${product.quantity}`}\n                  <div\n                    className=\"cart__info--add\"\n                    onClick={() => {\n                      increaseQty({ ...product }, cart._id);\n                    }}\n                  >\n                    +\n                  </div>\n                </ListGroupItem>\n\n                <Button\n                  className=\"cart__info--remo\"\n                  onClick={() => {\n                    deleteProduct({ ...product }, cart._id);\n                  }}\n                >\n                  Remove\n                </Button>\n              </ListGroup>\n            </Card>\n          );\n        })}\n      </div>\n      {!cart && !cart ? (\n        <div />\n      ) : (\n        <div className=\"cart__footer\">\n          <div className=\"cart__footer--total\">\n            <h2>\n              Your total:{\" \"}\n              {/* <Badge variant=\"secondary\">{`$${cart?.cartTotal.toFixed(\n                2\n              )}`}</Badge> */}\n            </h2>\n            <h2>{`$${cart?.cartTotal.toFixed(2)}`}</h2>\n          </div>\n          <div className=\"cart__footer--qty\">\n            <h2>\n              Total items:\n              {/* <Badge variant=\"secondary\">{cart?.cartQuantity}</Badge> */}\n            </h2>\n            <h2>{cart?.cartQuantity}</h2>\n          </div>\n          <button\n            // onClick={() => setShowCheckoutModal(true)}\n            onClick={() => checkAuth()}\n            className=\"cart__footer--checkout\"\n          >\n            Checkout\n          </button>\n        </div>\n      )}\n      <Stripe />\n      <Elements stripe={stripePromise}>\n        <CheckoutModal\n          show={showCheckoutModal}\n          onHide={() => setShowCheckoutModal(false)}\n        />\n      </Elements>\n    </section>\n  );\n}\n\nexport default ShoppingCart;\n","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/AppContext/AppContext.jsx",["82"],"import React, { createContext, useState, useEffect } from \"react\";\nimport swal from \"sweetalert\";\nimport axios from \"axios\";\n\nconst baseUrl = \"http://localhost:8080/api\";\n\nexport const AppContext = createContext();\n\nexport const ContextProvider = ({ children }) => {\n  const token = localStorage.getItem(\"token\");\n  // const user = localStorage.getItem(\"user\");\n  const [selectedCategory, setSelectedCategory] = useState([]);\n  const [productList, setProductList] = useState([]);\n  const [selectedProduct, setSelectedProduct] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [categoryList, setCategoryList] = useState([]);\n  const [randomItems, setRandomItems] = useState([]);\n  const [currentUser, setCurrentUser] = useState();\n  const [drop, setDrop] = useState(\"\");\n  const [cart, setCart] = useState([]);\n  const [purchased, setPurchased] = useState();\n  const [showCheckoutModal, setShowCheckoutModal] = useState(false);\n  const [logInModalShow, setLogInModalShow] = useState(false);\n  const [signUpModalShow, setSignUpModalShow] = useState(false);\n  const [isSignedIn, setIsSignedIn] = useState(false);\n  let storage = JSON.parse(localStorage.getItem(\"guestCart\"));\n  const guestCart = {\n    isOpen: true,\n    products: [],\n    cartQuantity: 0,\n    cartTotal: 0,\n  };\n\n  //Get list of categories\n  const getCategoryList = async () => {\n    axios\n      .get(`${baseUrl}/categories`)\n      .then((res) => {\n        setCategoryList(res.data);\n      })\n      .catch((err) => swal(err.message));\n  };\n\n  //Get product list\n  const getProductList = async () => {\n    axios\n      .get(`${baseUrl}/product/list`)\n      .then((res) => {\n        setProductList(res.data);\n      })\n      .catch((err) => swal(err.message));\n  };\n\n  //CART FUNCTIONS//\n\n  //Get cart\n  const getCart = async () => {\n    axios\n      .get(`${baseUrl}/cart`, {\n        headers: {\n          authorization: `Bearer ${token}`,\n        },\n      })\n      .then((res) => setCart(res.data))\n      .catch((err) => swal(\"getCart\", err.message));\n  };\n\n  //INCREASE product quantity in cart\n  const increaseQty = async (product, cartId) => {\n    if (!token) {\n      let guestCart = JSON.parse(localStorage.getItem(\"guestCart\"));\n      //find product index in guest cart\n      let index = guestCart.products\n        .map((product) => product.name)\n        .indexOf(product.name);\n      //update product quantity\n      guestCart.products[index].quantity =\n        guestCart.products[index].quantity + 1;\n      guestCart.products[index].productTotal =\n        guestCart.products[index].productTotal + product.price;\n      //recalculate cart totals\n      guestCart.cartTotal = guestCart.products\n        .map((product) => product.productTotal)\n        .reduce((acc, curr) => acc + curr);\n      guestCart.cartQuantity = guestCart.products\n        .map((product) => product.quantity)\n        .reduce((acc, curr) => acc + curr);\n      //save guest cart to state and local storage\n      setCart(guestCart);\n      localStorage.setItem(\"guestCart\", JSON.stringify(guestCart));\n    } else if (token) {\n      try {\n        await axios\n          .put(\n            `${baseUrl}/cart/increase/${cartId}`,\n            { product, cartId },\n            {\n              headers: {\n                authorization: `Bearer ${token}`,\n              },\n            }\n          )\n          .then((res) => setCart(res.data), setLoading(false));\n      } catch (error) {\n        swal(\n          \"Please login or create an account to add items to your cart\",\n          error.message\n        );\n      }\n    }\n  };\n\n  //DECREASE product quantity in cart\n  const decreaseQty = async (product, cartId) => {\n    if (!token) {\n      let guestCart = JSON.parse(localStorage.getItem(\"guestCart\"));\n      //find product index in guest cart\n      let index = guestCart.products\n        .map((product) => product.name)\n        .indexOf(product.name);\n      //update product quantity\n      guestCart.products[index].quantity =\n        guestCart.products[index].quantity - 1;\n      guestCart.products[index].productTotal =\n        guestCart.products[index].productTotal - product.price;\n      //recalculate cart totals\n      guestCart.cartTotal = guestCart.products\n        .map((product) => product.productTotal)\n        .reduce((acc, curr) => acc + curr);\n      guestCart.cartQuantity = guestCart.products\n        .map((product) => product.quantity)\n        .reduce((acc, curr) => acc + curr);\n      //save guest cart to state and local storage\n      setCart(guestCart);\n      localStorage.setItem(\"guestCart\", JSON.stringify(guestCart));\n    } else {\n      try {\n        await axios\n          .put(\n            `${baseUrl}/cart/decrease/${cartId}`,\n            { product },\n            {\n              headers: {\n                authorization: `Bearer ${token}`,\n              },\n            }\n          )\n          .then((res) => setCart(res.data))\n          .catch((err) => swal(err.message));\n      } catch (error) {\n        swal(error.message);\n      }\n    }\n  };\n\n  //DELETE selected product from cart\n  const deleteProduct = async (product, cartId) => {\n    if (!token) {\n      let guestCart = JSON.parse(localStorage.getItem(\"guestCart\"));\n      //remove selected product from guest cart\n      if (guestCart.products.length === 1) {\n        guestCart.products = [];\n        guestCart.cartTotal = 0;\n        guestCart.cartQuantity = 0;\n      } else if (guestCart.products.length > 1) {\n        guestCart.products = guestCart.products.filter(\n          (item) => item.name !== product.name\n        );\n        //recalculate cart totals\n        guestCart.cartTotal = guestCart.products\n          .map((product) => product.productTotal)\n          .reduce((acc, curr) => acc + curr);\n        guestCart.cartQuantity = guestCart.products\n          .map((product) => product.quantity)\n          .reduce((acc, curr) => acc + curr);\n      }\n\n      //save guest cart to state and local storage\n      setCart(guestCart);\n      localStorage.setItem(\"guestCart\", JSON.stringify(guestCart));\n    } else {\n      try {\n        await axios\n          .put(\n            `${baseUrl}/cart/delete/${cartId}`,\n            { product, cartId },\n            {\n              headers: {\n                authorization: `Bearer ${token}`,\n              },\n            }\n          )\n          .then((res) => setCart(res.data))\n          .catch((err) => swal(err.message));\n      } catch (error) {\n        swal(error.message);\n      }\n    }\n  };\n  // const getRandom = () => {\n  //   const randomIndex = Math.floor(Math.random() * categoryList?.length);\n  //   const randomId = categoryList[randomIndex]?._id;\n\n  //   axios.get(`${baseUrl}/categories/${randomId}`).then((res) => {\n  //     setRandomItems(res.data);\n  //     console.log(res.data);\n  //   });\n  // };\n\n  useEffect(() => {\n    getCategoryList();\n    getProductList();\n    // getRandom();\n    if (!token && storage === null) {\n      setCart(guestCart);\n      localStorage.setItem(\"guestCart\", JSON.stringify(guestCart));\n    } else if (!token && storage) {\n      let guestCart = JSON.parse(localStorage.getItem(\"guestCart\"));\n      setCart(guestCart);\n    }\n\n    if (token) {\n      localStorage.removeItem(\"guestCart\");\n      getCart();\n    }\n  }, [token]);\n\n  return (\n    <AppContext.Provider\n      value={{\n        randomItems,\n        setRandomItems,\n        isSignedIn,\n        setIsSignedIn,\n        logInModalShow,\n        setLogInModalShow,\n        signUpModalShow,\n        setSignUpModalShow,\n        showCheckoutModal,\n        setShowCheckoutModal,\n        selectedCategory,\n        setSelectedCategory,\n        selectedProduct,\n        setSelectedProduct,\n        loading,\n        setLoading,\n        categoryList,\n        setCategoryList,\n        productList,\n        currentUser,\n        setCurrentUser,\n        getCategoryList,\n        drop,\n        setDrop,\n        cart,\n        setCart,\n        token,\n        increaseQty,\n        decreaseQty,\n        deleteProduct,\n        purchased,\n        setPurchased,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n","/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/components/CheckoutModal/CheckoutModal.jsx",[],"/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/components/Field/Field.jsx",[],"/Users/christopherpalacios/Desktop/christopher-palacios-capstone-c41/eShop/client/src/components/Stripe/Stripe.jsx",[],{"ruleId":"83","severity":1,"message":"84","line":14,"column":5,"nodeType":"85","messageId":"86","endLine":14,"endColumn":12},{"ruleId":"87","severity":1,"message":"88","line":25,"column":6,"nodeType":"89","endLine":25,"endColumn":8,"suggestions":"90"},{"ruleId":"87","severity":1,"message":"91","line":49,"column":6,"nodeType":"89","endLine":49,"endColumn":24,"suggestions":"92"},{"ruleId":"83","severity":1,"message":"93","line":13,"column":27,"nodeType":"85","messageId":"86","endLine":13,"endColumn":38},{"ruleId":"83","severity":1,"message":"93","line":21,"column":5,"nodeType":"85","messageId":"86","endLine":21,"endColumn":16},{"ruleId":"87","severity":1,"message":"94","line":59,"column":6,"nodeType":"89","endLine":59,"endColumn":8,"suggestions":"95"},{"ruleId":"87","severity":1,"message":"96","line":226,"column":6,"nodeType":"89","endLine":226,"endColumn":13,"suggestions":"97"},"no-unused-vars","'setCart' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setCurrentUser' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["98"],"React Hook useEffect has a missing dependency: 'getSelected'. Either include it or remove the dependency array.",["99"],"'currentUser' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'guestCart', 'setCart', and 'token'. Either include them or remove the dependency array.",["100"],"React Hook useEffect has missing dependencies: 'getCart', 'guestCart', and 'storage'. Either include them or remove the dependency array.",["101"],{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},"Update the dependencies array to be: [setCurrentUser, user]",{"range":"110","text":"111"},"Update the dependencies array to be: [categoryList, getSelected, id]",{"range":"112","text":"113"},"Update the dependencies array to be: [guestCart, setCart, token]",{"range":"114","text":"115"},"Update the dependencies array to be: [getCart, guestCart, storage, token]",{"range":"116","text":"117"},[801,803],"[setCurrentUser, user]",[1191,1209],"[categoryList, getSelected, id]",[1656,1658],"[guestCart, setCart, token]",[7232,7239],"[getCart, guestCart, storage, token]"]